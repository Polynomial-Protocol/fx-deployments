include = [
    "../../oracles/pyth-atom.toml",
    "../../markets/common/bigcap-settings.toml",
]

[setting.perpsAtomMarketId]

[setting.perpsAtomSkewScale]

[setting.perpsAtomMaxFundingVelocity]

[setting.perpsAtomMakerFeeRatio]

[setting.perpsAtomTakerFeeRatio]

[setting.perpsAtomMaxMarketSize]

[setting.perpsAtomInitialMarginRatio]

[setting.perpsAtomMaintenanceMarginScalar]

[setting.perpsAtomMinimumInitialMarginRatio]

[setting.perpsAtomFlagRewardRatioD18]

[setting.perpsAtomMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsAtomMaxSecondsInLiquidationWindow]

[setting.perpsAtomMinimumPositionMargin]

[setting.perpsAtomLockedOiRatio]

[setting.perpsAtomSynthMaxCollateralAmount]

[setting.perpsAtomMaxLiquidationPd]

[setting.perpsAtomEndorsedLiquidator]

[invoke.createperpsAtomMarket]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "createMarket"
args = [
    "<%= settings.perpsAtomMarketId %>",
    "Cosmos Hub",
    "ATOM",
]
depends = [
    "provision.system",
    "provision.perpsFactory",
]

[invoke.createperpsAtomMarket.fromCall]
func = "owner"

[invoke.setperpsAtomPrice]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "updatePriceData"
args = [
    "<%= settings.perpsAtomMarketId %>",
    "<%= extras.perpsAtom_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]
depends = [
    "invoke.createperpsAtomMarket",
]

[invoke.setperpsAtomPrice.fromCall]
func = "owner"

[invoke.addperpsAtomSettlementStrategy]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "addSettlementStrategy"
args = [
    "<%= settings.perpsAtomMarketId %>",
    { strategyType = "0", settlementDelay = "0", settlementWindowDuration = "1", priceVerificationContract = "0x0000000000000000000000000000000000000000", feedId = "0x0000000000000000000000000000000000000000000000000000000000000000", settlementReward = "0", disabled = false, commitmentPriceDelay = "0" },
]
depends = [
    "invoke.createperpsAtomMarket",
]

[invoke.addperpsAtomSettlementStrategy.fromCall]
func = "owner"

[invoke.addperpsAtomSettlementStrategy.extra.perpsAtom_pyth_settlement_strategy]
event = "SettlementStrategyAdded"
arg = 2

[invoke.setperpsAtomSettlementStrategy]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsAtomMarketId %>",
    "<%= extras.perpsAtom_pyth_settlement_strategy %>",
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.perpsAtomFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "2" },
]
depends = [
    "provision.perpsFactory",
    "setting.perpsAtomMarketId",
    "invoke.addperpsAtomSettlementStrategy",
    "provision.pyth_erc7412_wrapper",
    "setting.bigCapSettlementDelay",
    "setting.bigCapSettlementWindowDuration",
    "setting.perpsAtomFeedId",
    "setting.settlementReward",
]

[invoke.setperpsAtomSettlementStrategy.fromCall]
func = "owner"

[invoke.setperpsAtomFundingParameters]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setFundingParameters"
args = [
    "<%= settings.perpsAtomMarketId %>",
    "<%= parseEther(settings.perpsAtomSkewScale) %>",
    "<%= parseEther(settings.perpsAtomMaxFundingVelocity) %>",
]
depends = [
    "invoke.createperpsAtomMarket",
]

[invoke.setperpsAtomFundingParameters.fromCall]
func = "owner"

[invoke.setperpsAtomOrderFees]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setOrderFees"
args = [
    "<%= settings.perpsAtomMarketId %>",
    "<%= parseEther(settings.perpsAtomMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsAtomTakerFeeRatio) %>",
]
depends = [
    "invoke.createperpsAtomMarket",
]

[invoke.setperpsAtomOrderFees.fromCall]
func = "owner"

[invoke.setperpsAtomMaxMarketSize]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setMaxMarketSize"
args = [
    "<%= settings.perpsAtomMarketId %>",
    "<%= parseEther(settings.perpsAtomMaxMarketSize) %>",
]
depends = [
    "invoke.createperpsAtomMarket",
]

[invoke.setperpsAtomMaxMarketSize.fromCall]
func = "owner"

[invoke.setperpsAtomMaxMarketValue]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setMaxMarketValue"
args = [
    "<%= settings.perpsAtomMarketId %>",
    "<%= parseEther(settings.perpsAtomMaxMarketValue) %>",
]
depends = [
    "invoke.createperpsAtomMarket",
]

[invoke.setperpsAtomMaxMarketValue.fromCall]
func = "owner"

[invoke.setperpsAtomMaxLiquidationParameters]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsAtomMarketId %>",
    "<%= parseEther(settings.perpsAtomMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsAtomMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsAtomMaxLiquidationPd) %>",
    "<%= settings.perpsAtomEndorsedLiquidator %>",
]
depends = [
    "invoke.createperpsAtomMarket",
]

[invoke.setperpsAtomMaxLiquidationParameters.fromCall]
func = "owner"

[invoke.setperpsAtomLiquidationParameters]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsAtomMarketId %>",
    "<%= parseEther(settings.perpsAtomInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsAtomMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsAtomMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsAtomFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsAtomMinimumPositionMargin) %>",
]
depends = [
    "invoke.createperpsAtomMarket",
]

[invoke.setperpsAtomLiquidationParameters.fromCall]
func = "owner"

[invoke.setperpsAtomLockedOiRatio]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setLockedOiRatio"
args = [
    "<%= settings.perpsAtomMarketId %>",
    "<%= parseEther(settings.perpsAtomLockedOiRatio) %>",
]
depends = [
    "invoke.createperpsAtomMarket",
]

[invoke.setperpsAtomLockedOiRatio.fromCall]
func = "owner"

[invoke.setperpsAtomLimitOrderFees]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setLimitOrderFees"
args = [
    "<%= settings.perpsAtomMarketId %>",
    "<%= parseEther(settings.perpsAtomLimitOrderMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsAtomLimitOrderTakerFeeRatio) %>",
]
depends = [
    "invoke.createperpsAtomMarket",
]

[invoke.setperpsAtomLimitOrderFees.fromCall]
func = "owner"
