# This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error
# Latest Pyth Price
[setting.pythUSDCFeedId]
# https://pyth.network/developers/price-feed-ids
defaultValue = "0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a"


[invoke.registerPythUSDCOracleNode]
target = ["system.oracle_manager.Proxy"]
func = "registerNode"
args = [
    5, # 5 = pyth aggregator type
    "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pythUSDCFeedId, false]) %>",
    [
    ],
]
extra.USDC_pyth_oracle_id.event = "NodeRegistered"
extra.USDC_pyth_oracle_id.arg = 0
depends = ["provision.system", "setting.pyth_price_verification_address", "setting.pythUSDCFeedId"]

# Pyth Off-chain Lookup
[invoke.registerLookupUSDCOracleNode]
target = ["system.oracle_manager.Proxy"]
func = "registerNode"
args = [
    9, # 9 = PythOffchainLookupNode
    "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pythUSDCFeedId, settings.bigCapDefaultStalenessTolerance]) %>",
    [
    ],
]
extra.USDC_lookup_oracle_id.event = "NodeRegistered"
extra.USDC_lookup_oracle_id.arg = 0
depends = [
    "provision.system",
    "provision.pyth_erc7412_wrapper",
    "setting.pythUSDCFeedId",
    "setting.bigCapDefaultStalenessTolerance"
]

# Staleness Node
[invoke.registerUSDCOracleNode]
target = ["system.oracle_manager.Proxy"]
func = "registerNode"
args = [
    7, # 7 = staleness circuit breaker
    "<%= defaultAbiCoder.encode(['uint256'], [settings.bigCapDefaultStalenessTolerance]) %>",
    [
        "<%= extras.USDC_pyth_oracle_id %>",
        "<%= extras.USDC_lookup_oracle_id %>",
    ],
]
extra.USDC_staleness_oracle_id.event = "NodeRegistered"
extra.USDC_staleness_oracle_id.arg = 0
