include = [
    "../../oracles/pyth-snx.toml",
    "../../markets/common/bigcap-settings.toml",
]

[setting.perpsSnxMarketId]

[setting.perpsSnxSkewScale]

[setting.perpsSnxMaxFundingVelocity]

[setting.perpsSnxMakerFeeRatio]

[setting.perpsSnxTakerFeeRatio]

[setting.perpsSnxMaxMarketSize]

[setting.perpsSnxInitialMarginRatio]

[setting.perpsSnxMaintenanceMarginScalar]

[setting.perpsSnxMinimumInitialMarginRatio]

[setting.perpsSnxFlagRewardRatioD18]

[setting.perpsSnxMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsSnxMaxSecondsInLiquidationWindow]

[setting.perpsSnxMinimumPositionMargin]

[setting.perpsSnxLockedOiRatio]

[setting.perpsSnxSynthMaxCollateralAmount]

[setting.perpsSnxMaxLiquidationPd]

[setting.perpsSnxEndorsedLiquidator]

[invoke.createperpsSnxMarket]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "createMarket"
args = [
    "<%= settings.perpsSnxMarketId %>",
    "Synthetix",
    "SNX",
]
depends = [
    "provision.system",
    "provision.perpsFactory",
]

[invoke.createperpsSnxMarket.fromCall]
func = "owner"

[invoke.setperpsSnxPrice]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "updatePriceData"
args = [
    "<%= settings.perpsSnxMarketId %>",
    "<%= extras.perpsSnx_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]
depends = [
    "invoke.createperpsSnxMarket",
]

[invoke.setperpsSnxPrice.fromCall]
func = "owner"

[invoke.addperpsSnxSettlementStrategy]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "addSettlementStrategy"
args = [
    "<%= settings.perpsSnxMarketId %>",
    { strategyType = "0", settlementDelay = "0", settlementWindowDuration = "1", priceVerificationContract = "0x0000000000000000000000000000000000000000", feedId = "0x0000000000000000000000000000000000000000000000000000000000000000", settlementReward = "0", disabled = false, commitmentPriceDelay = "0" },
]
depends = [
    "invoke.createperpsSnxMarket",
]

[invoke.addperpsSnxSettlementStrategy.fromCall]
func = "owner"

[invoke.addperpsSnxSettlementStrategy.extra.perpsSnx_pyth_settlement_strategy]
event = "SettlementStrategyAdded"
arg = 2

[invoke.setperpsSnxSettlementStrategy]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsSnxMarketId %>",
    "<%= extras.perpsSnx_pyth_settlement_strategy %>",
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.perpsSnxFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "2" },
]
depends = [
    "provision.perpsFactory",
    "setting.perpsSnxMarketId",
    "invoke.addperpsSnxSettlementStrategy",
    "provision.pyth_erc7412_wrapper",
    "setting.bigCapSettlementDelay",
    "setting.bigCapSettlementWindowDuration",
    "setting.perpsSnxFeedId",
    "setting.settlementReward",
]

[invoke.setperpsSnxSettlementStrategy.fromCall]
func = "owner"

[invoke.setperpsSnxFundingParameters]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setFundingParameters"
args = [
    "<%= settings.perpsSnxMarketId %>",
    "<%= parseEther(settings.perpsSnxSkewScale) %>",
    "<%= parseEther(settings.perpsSnxMaxFundingVelocity) %>",
]
depends = [
    "invoke.createperpsSnxMarket",
]

[invoke.setperpsSnxFundingParameters.fromCall]
func = "owner"

[invoke.setperpsSnxOrderFees]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setOrderFees"
args = [
    "<%= settings.perpsSnxMarketId %>",
    "<%= parseEther(settings.perpsSnxMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsSnxTakerFeeRatio) %>",
]
depends = [
    "invoke.createperpsSnxMarket",
]

[invoke.setperpsSnxOrderFees.fromCall]
func = "owner"

[invoke.setperpsSnxMaxMarketSize]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setMaxMarketSize"
args = [
    "<%= settings.perpsSnxMarketId %>",
    "<%= parseEther(settings.perpsSnxMaxMarketSize) %>",
]
depends = [
    "invoke.createperpsSnxMarket",
]

[invoke.setperpsSnxMaxMarketSize.fromCall]
func = "owner"

[invoke.setperpsSnxMaxMarketValue]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setMaxMarketValue"
args = [
    "<%= settings.perpsSnxMarketId %>",
    "<%= parseEther(settings.perpsSnxMaxMarketValue) %>",
]
depends = [
    "invoke.createperpsSnxMarket",
]

[invoke.setperpsSnxMaxMarketValue.fromCall]
func = "owner"

[invoke.setperpsSnxMaxLiquidationParameters]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsSnxMarketId %>",
    "<%= parseEther(settings.perpsSnxMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsSnxMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsSnxMaxLiquidationPd) %>",
    "<%= settings.perpsSnxEndorsedLiquidator %>",
]
depends = [
    "invoke.createperpsSnxMarket",
]

[invoke.setperpsSnxMaxLiquidationParameters.fromCall]
func = "owner"

[invoke.setperpsSnxLiquidationParameters]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsSnxMarketId %>",
    "<%= parseEther(settings.perpsSnxInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsSnxMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsSnxMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsSnxFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsSnxMinimumPositionMargin) %>",
]
depends = [
    "invoke.createperpsSnxMarket",
]

[invoke.setperpsSnxLiquidationParameters.fromCall]
func = "owner"

[invoke.setperpsSnxLockedOiRatio]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setLockedOiRatio"
args = [
    "<%= settings.perpsSnxMarketId %>",
    "<%= parseEther(settings.perpsSnxLockedOiRatio) %>",
]
depends = [
    "invoke.createperpsSnxMarket",
]

[invoke.setperpsSnxLockedOiRatio.fromCall]
func = "owner"

[invoke.setperpsSnxLimitOrderFees]
target = [
    "perpsFactory.PerpsMarketProxy",
]
func = "setLimitOrderFees"
args = [
    "<%= settings.perpsSnxMarketId %>",
    "<%= parseEther(settings.perpsSnxLimitOrderMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsSnxLimitOrderTakerFeeRatio) %>",
]
depends = [
    "invoke.createperpsSnxMarket",
]

[invoke.setperpsSnxLimitOrderFees.fromCall]
func = "owner"
